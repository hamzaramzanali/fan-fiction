{"version":3,"sources":["utils/mutations.js","utils/auth.js","components/SignUp.js","components/Login.js","components/Navbar.js","pages/HomePage.js","images/marvel-intro.gif","components/Header.js","App.js","index.js"],"names":["LOGIN_USER","gql","ADD_USER","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","SignupForm","useState","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","useMutation","addUser","handleInputChange","event","target","name","value","handleFormSubmit","preventDefault","currentTarget","checkValidity","stopPropagation","variables","data","Auth","login","console","error","Form","noValidate","onSubmit","Alert","dismissible","onClose","show","variant","Group","Label","htmlFor","Control","type","placeholder","onChange","required","Feedback","Button","disabled","LoginForm","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Container","fluid","Brand","as","Link","to","Toggle","Collapse","id","Nav","className","loggedIn","onClick","logout","Modal","size","onHide","Tab","defaultActiveKey","Header","closeButton","Title","Item","eventKey","Body","Content","Pane","Login","handleModalClose","SignUp","HomePage","styles","image","width","height","src","logo","alt","style","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.24cf29bb.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\r\n\r\nexport const LOGIN_USER = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n      }\r\n    }\r\n  }  \r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n  mutation addUser($username: String!, $email: String!, $password: String!) {\r\n    addUser(username: $username, email: $email, password: $password) {\r\n        token\r\n        user {\r\n            _id\r\n            username\r\n      }\r\n    }\r\n  }\r\n`;\r\n","// use this to decode a token and get the user's information out of it\r\nimport decode from 'jwt-decode';\r\n\r\n// create a new class to instantiate for a user\r\nclass AuthService {\r\n  // get user data\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  // check if user's logged in\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token); // handwaiving here\r\n  }\r\n\r\n  // check if token is expired\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","import React, { useState } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\nimport { useMutation } from '@apollo/client';\r\nimport { ADD_USER } from '../utils/mutations';\r\n\r\n// import { createUser } from '../utils/API';\r\nimport Auth from '../utils/auth';\r\n\r\nconst SignupForm = () => {\r\n  // set initial form state\r\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\r\n  // set state for form validation\r\n  const [validated] = useState(false);\r\n  // set state for alert\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n  const [addUser] = useMutation(ADD_USER);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const { data } = await addUser({\r\n        variables: { ...userFormData },\r\n      });\r\n\r\n      Auth.login(data.addUser.token);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* This is needed for the validation functionality above */}\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        {/* show alert if server response is bad */}\r\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n          Something went wrong with your signup!\r\n        </Alert>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='username'>Username</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Your username'\r\n            name='username'\r\n            onChange={handleInputChange}\r\n            value={userFormData.username}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='email'>Email</Form.Label>\r\n          <Form.Control\r\n            type='email'\r\n            placeholder='Your email address'\r\n            name='email'\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='password'>Password</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Your password'\r\n            name='password'\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\r\n          type='submit'\r\n          variant='success'>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignupForm;\r\n","// see SignupForm.js for comments\r\nimport React, { useState } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { LOGIN_USER } from '../utils/mutations';\r\n\r\n// import { loginUser } from '../utils/API';\r\nimport Auth from '../utils/auth';\r\n\r\nconst LoginForm = () => {\r\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\r\n  const [validated] = useState(false);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n  const [login] = useMutation(LOGIN_USER);\r\n  \r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const { data } = await login({\r\n        variables: { ...userFormData },\r\n      });\r\n\r\n      Auth.login(data.login.token);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n          Something went wrong with your login credentials!\r\n        </Alert>\r\n        <Form.Group>\r\n          <Form.Label htmlFor='email'>Email</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Your email'\r\n            name='email'\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='password'>Password</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Your password'\r\n            name='password'\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.email && userFormData.password)}\r\n          type='submit'\r\n          variant='success'>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\r\nimport SignUpForm from '../components/SignUp';\r\nimport LoginForm from '../components/Login';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst AppNavbar = () => {\r\n  // set modal display state\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Navbar bg='dark' variant='dark' expand='lg'>\r\n        <Container fluid>\r\n          <Navbar.Brand as={Link} to='/'>\r\n            Marvel Fan Fiction\r\n          </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls='navbar' />\r\n          <Navbar.Collapse id='navbar'>\r\n            <Nav className='ml-auto'>\r\n              {/* <Nav.Link as={Link} to='/'>\r\n                Search For Books\r\n              </Nav.Link> */}\r\n              {/* if user is logged in show saved books and logout */}\r\n              {Auth.loggedIn() ? (\r\n                <>\r\n                  {/* <Nav.Link as={Link} to='/saved'>\r\n                    See Your Books\r\n                  </Nav.Link> */}\r\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\r\n                </>\r\n              ) : (\r\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\r\n              )}\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n      {/* set modal data up */}\r\n      <Modal\r\n        size='lg'\r\n        show={showModal}\r\n        onHide={() => setShowModal(false)}\r\n        aria-labelledby='signup-modal'>\r\n        {/* tab container to do either signup or login component */}\r\n        <Tab.Container defaultActiveKey='login'>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id='signup-modal'>\r\n              <Nav variant='pills'>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\r\n                </Nav.Item>\r\n              </Nav>\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Tab.Content>\r\n              <Tab.Pane eventKey='login'>\r\n                <LoginForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n              <Tab.Pane eventKey='signup'>\r\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n            </Tab.Content>\r\n          </Modal.Body>\r\n        </Tab.Container>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppNavbar;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\n\r\nfunction HomePage () {\r\n    return (\r\n        <div>Hello World</div>\r\n    )\r\n}\r\n\r\nexport default HomePage;\r\n\r\n","export default __webpack_public_path__ + \"static/media/marvel-intro.c2367f43.gif\";","import React from 'react';\r\nimport logo from '../images/marvel-intro.gif'; \r\n\r\nconst styles = {\r\n  \r\n    image: {\r\n        width: \"100%\",\r\n        height: \"200px\"\r\n    },\r\n} \r\n\r\nfunction Header() {\r\n  \r\n  return <img src={logo} alt=\"intro\" style={styles.image}/>;\r\n}\r\n\r\nexport default Header;\r\n\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\n// Apollo Provider to make every request work with the Apollo Server\r\nimport { ApolloClient, ApolloProvider, InMemoryCache, createHttpLink } from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\n\r\nimport Navbar from './components/Navbar';\r\nimport HomePage from './pages/HomePage';\r\nimport Header from './components/Header';\r\n\r\n// Construct our main GraphQL API endpoint\r\nconst httpLink = createHttpLink({\r\n  uri: '/graphql',\r\n});\r\n\r\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\r\nconst authLink = setContext((_, { headers }) => {\r\n  // get the authentication token from local storage if it exists\r\n  const token = localStorage.getItem('id_token');\r\n  // return the headers to the context so httpLink can read them\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : '',\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Header />\r\n      <Router>\r\n        <>\r\n          <Navbar />\r\n          <Routes>\r\n            <Route\r\n              path='/'\r\n              element={<HomePage />}\r\n            />\r\n            {/* <Route\r\n              path='/saved'\r\n              element={<SavedBooks />}\r\n            />\r\n            <Route\r\n              path='*'\r\n              element={<h1 className='display-2'>Wrong page!</h1>}\r\n            /> */}\r\n          </Routes>\r\n        </>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}